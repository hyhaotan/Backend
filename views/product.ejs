<!doctype html>
<html lang="en">

<head>
    <title>Admin Dashboard</title>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous" />
    <style>
        .sidebar {
            height: 100vh;
            padding-top: 20px;
        }

        .nav-link {
            font-size: 16px;
            padding: 10px;
            color: white;
            text-decoration: none;
        }

        .sidebar .nav-item .nav-link.active {
            background-color: white;
            color: black;
            border-radius: 5px;
        }

        .nav-link:hover {
            background-color: white;
            color: black;
            transition: 500ms;
        }
    </style>
</head>

<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar (Thanh điều hướng bên trái) -->
            <nav class="col-md-3 col-lg-2 d-md-block bg-dark sidebar">
                <div class="position-sticky">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link active" href="/dashboard">
                                <i class="bi bi-house-door"></i>
                                Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link active" href="/order">
                                <i class="bi bi-house-door"></i>
                                Order Management
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/product">
                                <i class="bi bi-cart"></i>
                                Product Management
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/useraccount">
                                <i class="bi bi-person"></i>
                                User Management
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <i class="bi bi-gear"></i>
                                Settings
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/login">
                                <i class="bi bi-gear"></i>
                                Logout
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- Nội dung chính của trang -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-4">
                <h1 class="text-center mt-4">Admin Dashboard</h1>
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h2>Product Management</h2>
                    <button class="btn btn-primary" id="addProductBtn">Add Product</button>
                </div>

                <!-- Bảng sản phẩm -->
                <table class="table table-striped table-bordered">
                    <thead class="table-dark">
                        <tr>
                            <th>STT</th>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Price</th>
                            <th>Model</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        <!-- Dữ liệu sản phẩm sẽ được hiển thị ở đây -->
                    </tbody>
                </table>
            </main>
        </div>
    </div>

    <!-- Add Product Modal -->
    <div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addProductModalLabel">Add Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addProductForm">
                        <div class="mb-3">
                            <label for="addProductName" class="form-label">Name</label>
                            <input type="text" class="form-control" id="addProductName" required />
                        </div>
                        <div class="mb-3">
                            <label for="addProductType" class="form-label">Type</label>
                            <input type="text" class="form-control" id="addProductType" required />
                        </div>
                        <div class="mb-3">
                            <label for="addProductPrice" class="form-label">Price</label>
                            <input type="number" class="form-control" id="addProductPrice" required />
                        </div>
                        <div class="mb-3">
                            <label for="addProductModel" class="form-label">Model</label>
                            <input type="text" class="form-control" id="addProductModel" required />
                        </div>
                        <div class="mb-3">
                            <label for="addProductImage" class="form-label">Image URL</label>
                            <input type="text" class="form-control" id="addProductImage" required />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveAddProductBtn">Save</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal chỉnh sửa sản phẩm -->
    <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProductModalLabel">Chỉnh sửa sản phẩm</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editProductForm">
                        <input type="hidden" id="editProductId" />
                        <div class="mb-3">
                            <label for="editProductName" class="form-label">Tên sản phẩm</label>
                            <input type="text" class="form-control" id="editProductName" required />
                        </div>
                        <div class="mb-3">
                            <label for="editProductType" class="form-label">Loại sản phẩm</label>
                            <input type="text" class="form-control" id="editProductType" required />
                        </div>
                        <div class="mb-3">
                            <label for="editProductPrice" class="form-label">Giá sản phẩm</label>
                            <input type="number" class="form-control" id="editProductPrice" required />
                        </div>
                        <div class="mb-3">
                            <label for="editProductModel" class="form-label">Model</label>
                            <input type="text" class="form-control" id="editProductModel" required />
                        </div>
                        <div class="mb-3">
                            <label for="editProductImage" class="form-label">URL Hình ảnh</label>
                            <input type="text" class="form-control" id="editProductImage" required />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveEditProductBtn">Save</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JavaScript Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
        integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
        crossorigin="anonymous"></script>

    <!-- product.js -->
    <script>
        let isEditing = false;
        let currentProductId = null;

        // Initialize Bootstrap modals
        const addProductModal = new bootstrap.Modal(document.getElementById('addProductModal'));
        const editProductModal = new bootstrap.Modal(document.getElementById('editProductModal'));

        // Add Product button logic
        document.getElementById('addProductBtn').addEventListener('click', () => {
            document.getElementById('addProductForm').reset();
            addProductModal.show();
        });

        // Save Add Product logic
        document.getElementById('saveAddProductBtn').addEventListener('click', async () => {
            const name = document.getElementById('addProductName').value;
            const type = document.getElementById('addProductType').value;
            const price = parseFloat(document.getElementById('addProductPrice').value);
            const model = document.getElementById('addProductModel').value;
            const image = document.getElementById('addProductImage').value;

            if (name && type && !isNaN(price) && model && image) {
                const productData = { name, type, price, model, image };

                try {
                    await fetch('/api/products', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(productData),
                    });

                    fetchProducts();
                    addProductModal.hide();
                    alert("Add product successfull!");
                } catch (error) {
                    console.error('Error saving product:', error);
                }
            } else {
                alert('Please fill all fields correctly.');
            }
        });

        // Fetch Products logic
        async function fetchProducts() {
            try {
                const response = await fetch('/api/products');
                const products = await response.json();

                const productTableBody = document.getElementById('productTableBody');
                productTableBody.innerHTML = '';

                products.forEach((product, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td><img src="${product.image}" alt="${product.name}" class="img-fluid" style="max-width: 100px; max-height: 100px;" /></td>
                        <td>${product.name}</td>
                        <td>${product.type}</td>
                        <td>$${product.price}</td>
                        <td>${product.model}</td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="editProduct('${product._id}')">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteProduct('${product._id}')">Delete</button>
                        </td>
                    `;
                    productTableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error fetching products:', error);
            }
        }

        async function editProduct(productId) {
            try {
                // Fetch the product details from the server
                const response = await fetch(`/api/products/${productId}`);
                const product = await response.json();

                // Populate the modal form fields with the product details
                document.getElementById('editProductId').value = product._id;
                document.getElementById('editProductName').value = product.name;
                document.getElementById('editProductType').value = product.type;
                document.getElementById('editProductPrice').value = product.price;
                document.getElementById('editProductModel').value = product.model;
                document.getElementById('editProductImage').value = product.image;

                // Show the modal
                const editModal = new bootstrap.Modal(document.getElementById('editProductModal'));
                editModal.show();
            } catch (error) {
                console.error('Error fetching product details:', error);
            }
        }

        // Save updated product data
        document.getElementById('saveEditProductBtn').addEventListener('click', async () => {
            const productId = document.getElementById('editProductId').value;
            const name = document.getElementById('editProductName').value;
            const type = document.getElementById('editProductType').value;
            const price = parseFloat(document.getElementById('editProductPrice').value);
            const model = document.getElementById('editProductModel').value;
            const image = document.getElementById('editProductImage').value;

            try {
                const response = await fetch(`/api/products/${productId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name, type, price, model, image }),
                });

                if (response.ok) {
                    alert('Sản phẩm đã được cập nhật thành công');
                    // Refresh the product list
                    fetchProducts();

                    // Hide the modal
                    const editModal = bootstrap.Modal.getInstance(document.getElementById('editProductModal'));
                    editModal.hide();
                } else {
                    const error = await response.json();
                    alert(`Cập nhật thất bại: ${error.message}`);
                }
            } catch (error) {
                console.error('Error updating product:', error);
                alert('Đã xảy ra lỗi khi cập nhật sản phẩm');
            }
        });

        // Delete Product logic
        async function deleteProduct(id) {
            const confirmed = confirm('Are you sure you want to delete this product?');
            if (confirmed) {
                try {
                    await fetch(`/api/products/${id}`, { method: 'DELETE' });
                    fetchProducts();
                } catch (error) {
                    console.error('Error deleting product:', error);
                }
            }
        }

        // Fetch products on page load
        document.addEventListener('DOMContentLoaded', fetchProducts);

        const navLinks = document.querySelectorAll('.nav-link');

        // Kiểm tra mục nào đã được lưu trong localStorage
        const activeLink = localStorage.getItem('activeLink');
        if (activeLink) {
            navLinks.forEach(link => {
                if (link.getAttribute('href') === activeLink) {
                    link.classList.add('active');
                }
            });
        }

        // Thêm sự kiện click
        navLinks.forEach(link => {
            link.addEventListener('click', function () {
                navLinks.forEach(nav => nav.classList.remove('active'));
                this.classList.add('active');
                localStorage.setItem('activeLink', this.getAttribute('href'));
            });
        });

    </script>
</body>

</html>